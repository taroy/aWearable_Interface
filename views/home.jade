header.jumbotron.subhead#overview
      <h1> aWearable </h1>
    section#homeContent
      
    <div class="page-header"><h1> 1. Connect your aWearable to the computer </h1></div>
      
    .row.example
        .span12#e2-exampleConnection
          p
            a.btn(href="#")#e2-buttonConnect
              i.icon-refresh
              |  Connect to aWearable
          .alert.alert-info Please connect to your aWearable using the button.
          .alert.hide.alert-error Unable to connect to aWearable!
          .alert.hide.alert-success Connection to aWearable established!
        .span12#e2-secondStep
      .page-header
        
      .row.example

       <!--
      .page-header
        h1 2. Choose information you want presented
          .row
            .span12
              .awareness-buttons
                  a.btn(button type="button", onclick="loadXMLDoc2()")
                    |  <b>Direction</b> <br> Get the relative <br>direction of <br> group members
                    a.btn(href="#")
                      |  <b>Distance</b>
                      a.btn(href="#")
                        |  <b>Coordinates</b>
      <div id="myDiv2"></div>
      p <br>or <br>choose to receive a notification when a member is close
                      
      a.btn(button type="button", onclick="loadXMLDoc()")
        |  <b>In-range</b><br> get notified when <br>a group member <br>is in your range
                        
      <div id="myDiv"></div>     --> 
      .page-header

        <h1>3. Components</h1>
          h2 AJAX
            a.btn(type="button", onclick="loadXMLDoc()")
               |  In- <br>range
            
               
        h1 3. Components 
          small <br>Choose the components you wish to use for your application
        .row
            .span12
              .awareness-buttons
                  a.btn(button type="button", onclick="loadDisplay()")
                    |  <b>Display</b>
                    a.btn(button type="button", onclick="loadLights()")
                      |  <b>Lights</b>
                      a.btn(button type="button", onclick="loadVibration()")
                        |  <b>Vibration</b>
                        a.btn(button type="button", onclick="loadSound()")
                          |  <b>Sound</b>
      <div id="divDisplay"></div>
      <div id="divLights"></div>
      </div>
      
      
      <div id="mainContainer">
      <h2>Drag and drop - demo 3</h2>
      <div class="konaBody">
      Drag the components onto the Arduino Board. Green is correct, red is wrong placed.
      </div>
      <div id="capitals">
      <p><b>Components</b></p>
      <div id="dropContent">
      <div class="dragableBox" id="box1"><img src="images/display.png"></div>
      <div class="dragableBox" id="box2"><img src="images/lights.jpg"></div>
      <div class="dragableBox" id="box3"><img src="images/motor.png"></div>
      <div class="dragableBox" id="box4"><img src="images/speaker.png"></div>
      </div>
      </div>
      <div id="countries">		
      <div id="box101" class="dragableBoxRight">Display here</div>
      <div id="box104" class="dragableBoxRight">Sound</div>
      <div id="box102" class="dragableBoxRight">Lights here</div>
      <div id="box103" class="dragableBoxRight">Vibration</div>		      
      </div>
      <div class="clear"></div>
      <div class="konaBody"></div>
      </div>

      <div id="debug"></div>
      script
        <!--// Custom drop action for the country boxes-->
        function dropItems(idOfDraggedItem,targetId,x,y){
          var targetObj = document.getElementById(targetId);	<!--// Creating reference to target obj-->
          var subDivs = targetObj.getElementsByTagName('DIV');	<!--// Number of subdivs-->
          if(subDivs.length>0 && targetId!='capitals')return;	<!--// Sub divs exists on target, i.e. element already dragged on it. => return from function without doing anything-->
          var sourceObj = document.getElementById(idOfDraggedItem);	<!--// Creating reference to source, i.e. dragged object-->
          var numericIdTarget = targetId.replace(/[^0-9]/gi,'')/1;	<!--// Find numeric id of target-->
          var numericIdSource = idOfDraggedItem.replace(/[^0-9]/gi,'')/1;	<!--// Find numeric id of source-->
          if(numericIdTarget-numericIdSource==100){	<!--// In the html above, there's a difference in 100 between the id of the country and it's capital(example:	-->									// Oslo have id "box1" and Norway have id "box101", i.e. 1 + 100.
            sourceObj.style.backgroundColor='#0F0';	<!--// Set green background color for dragged objec		-->
          }
          else {
            sourceObj.style.backgroundColor='red';	<!--// Reset back to default white background color-->
          }
          if(targetId=='capitals') {	<!--// Target is the capital box - append the dragged item as child of first sub div, i.e. as child of <div id="dropContent">-->
            targetObj = targetObj.getElementsByTagName('DIV')[0];
            sourceObj.style.backgroundColor='';
          }
          targetObj.appendChild(sourceObj);	<!--// Append	-->
        }
        var dragDropObj = new DHTMLgoodies_dragDrop();	<!--// Creating drag and drop objec-->
        
        <!--// Assigning drag events to the capitals-->
        dragDropObj.addSource('box1',true);	<!--// Make <div id="box1"> dragable. slide item back into original position after drop-->
        dragDropObj.addSource('box2',true);	<!-- Make <div id="box2"> dragable. slide item back into original position after drop-->
        dragDropObj.addSource('box3',true);	<!-- Make <div id="box3"> dragable. slide item back into original position after drop-->
        dragDropObj.addSource('box4',true);	<!-- Make <div id="box4"> dragable. slide item back into original position after drop-->
        
        <!--// Assigning drop events on the countries-->
        dragDropObj.addTarget('box101','dropItems'); <!--// Set <div id="leftColumn"> as a drop target. Call function dropItems on drop-->
        dragDropObj.addTarget('box102','dropItems'); <!--// Set <div id="leftColumn"> as a drop target. Call function dropItems on drop-->
        dragDropObj.addTarget('box103','dropItems'); <!--// Set <div id="leftColumn"> as a drop target. Call function dropItems on drop-->
        dragDropObj.addTarget('box104','dropItems'); <!--// Set <div id="leftColumn"> as a drop target. Call function dropItems on drop-->
        dragDropObj.addTarget('capitals','dropItems'); <!--// Set <div id="leftColumn"> as a drop target. Call function dropItems on drop-->
        
        dragDropObj.init();	// Initizlizing drag and drop object
    
      .page-header
        h1 4. OLD
    .span12#e2-secondStep
      p
        select.span2#e2-pinValue
          option(value=10) 100m
          option(value=9) 200m
          option(value=8) 500m
        input.span3#e2-interval(type="text",placeholder="Interval in Miliseconds") 
        |  
        a.btn(href="#")#e2-buttonStart
          i.icon-retweet
          |  Save range 
        |  
        a.btn(href="#")#e2-buttonStop
          i.icon-off
          |  Stop 
        |          
        label.label#e2-status(style="position: relative; top: -2px;") LED off
      .alert.hide.alert-info Please connect to your Arduino using the button.
      .alert.hide.alert-error Connect to Arduino first!
      .alert.hide.alert-success Connection to Arduino established!
  .page-header
      
      
      h1 4. NEW
    .span12#e2-secondStep
      p
        select.span2#e2-rangeValue
          option(value=333) 100m
          option(value=555) 200m
          option(value=666) 500m
        |  
        a.btn(href="#")#e2-buttonSend
          i.icon-retweet
          |  Save range 
        |  
  .page-header
      .page-header

        h1 5. Group members

       